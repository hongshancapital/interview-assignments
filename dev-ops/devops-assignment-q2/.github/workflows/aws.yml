# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a push is made to master
# or main branch
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Click `Settings` of the GitHub repository and select `Secrets`.
#    Add secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` with your AWS AKSK.

# 2. Replace the AWS account ID of the value of executionRoleArn in `task-definition.json`
#    with your AWS account ID.
# If you changed the value of `PREFIX` before deploying AWS CDK Stack, you will also need to
# complete the following steps:
#
# 1. Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name
#    created by AWS CDK Stack.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Replace the values for `service` and `cluster` in the workflow below with your service
#    and cluster names created by AWS CDK Stack.
#
# 3. Replace the value of `container-name` and `container-image` in the workflow below with
#    the name of the container in the `containerDefinitions` section of the task definition.
#
# 4. Replace the values of the below fields in `task-definition.json` with the values defined
#    in AWS CDK Stack.
#        1) containerDefinitions.name
#        2) containerDefinitions.image
#        3) containerDefinitions.logConfiguration.options.awslogs-group
#        4) containerDefinitions.logConfiguration.options.awslogs-region
#        5) executionRoleArn
#        6) family

on:
  push:
    branches:
      - master
      - main

name: Deploy to Amazon ECS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: cn-northwest-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: devops-assignment-q2-repository
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: devops-assignment-q2-app
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: devops-assignment-q2-service
        cluster: devops-assignment-q2-cluster
        wait-for-service-stability: false
