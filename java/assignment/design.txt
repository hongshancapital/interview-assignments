设计思路：
1 长短连接对应关系存在内存中，每个对应关系存2份，1份用长连接作key，短连接作value，1份短连接作key，长连接做value。
2 生成短域名算法是自增算法，根据有限的长链生成有限的id，不会重复。
      a 不选择MD5算法是因为是有损压缩算法，无限的可能对应到有限的字符，不可避免会有重复。重复的概率虽然低，但是在大数据量面前就是必然会发生。
      b 自增id暴露在外，有一定安全风险，但效率高不重复，短生成时间非常确定。
      c 自增id可充分利用1-8位长度的存储空间。
3 通过2个RESTAPI来做短连接的生成存储和通过长连接获取短连接
4 如果用于生产环境，在集群部署时，在高并发情况下可能会出现短连接碰撞并被覆盖的情况，需要使用分布式锁来保证安全性。
关于内存溢出：
	a 使用控制max_cache_size来硬性控制
	b 控制long-url的字符数 （比如最长支持1000个字符）
	c 这是一个demo环境的假设， 生产环境另说， 比方存储在redis集群，到了阈值内报警等
	d 或者对于活跃度不高的应用也可采用LRU的模式
