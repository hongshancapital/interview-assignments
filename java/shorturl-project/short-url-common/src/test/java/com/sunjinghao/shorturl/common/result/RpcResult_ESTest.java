/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 11:12:27 GMT 2021
 */

package com.sunjinghao.shorturl.common.result;

import org.junit.Test;
import static org.junit.Assert.*;
import com.sunjinghao.shorturl.common.result.RpcResult;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RpcResult_ESTest extends RpcResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RpcResult<Object> rpcResult0 = new RpcResult<Object>();
      RpcResult<RpcResult<Object>> rpcResult1 = new RpcResult<RpcResult<Object>>();
      rpcResult1.setData(rpcResult0);
      RpcResult rpcResult2 = (RpcResult)rpcResult1.getData();
      boolean boolean0 = rpcResult0.equals(rpcResult2);
      assertEquals((-1), (int)rpcResult2.getCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RpcResult<Object> rpcResult0 = new RpcResult<Object>();
      rpcResult0.setMsg("b+z{SlLA$s=y~&\"i");
      rpcResult0.getMsg();
      assertEquals((-1), (int)rpcResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RpcResult<String> rpcResult0 = new RpcResult<String>();
      rpcResult0.setMsg("");
      rpcResult0.getMsg();
      assertEquals((-1), (int)rpcResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RpcResult<Object> rpcResult0 = new RpcResult<Object>();
      rpcResult0.setCode((Integer) null);
      Integer integer0 = rpcResult0.getCode();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RpcResult<String> rpcResult0 = new RpcResult<String>();
      Integer integer0 = new Integer(0);
      rpcResult0.setCode(integer0);
      Integer integer1 = rpcResult0.getCode();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(518);
      RpcResult<RpcResult<Object>> rpcResult0 = new RpcResult<RpcResult<Object>>();
      rpcResult0.setCode(integer0);
      Integer integer1 = rpcResult0.getCode();
      assertEquals(518, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RpcResult<Object> rpcResult0 = new RpcResult<Object>();
      RpcResult<String> rpcResult1 = new RpcResult<String>();
      rpcResult0.canEqual(rpcResult1);
      assertEquals((-1), (int)rpcResult1.getCode());
      assertEquals((-1), (int)rpcResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RpcResult<Object> rpcResult0 = new RpcResult<Object>();
      Object object0 = rpcResult0.getData();
      RpcResult<String> rpcResult1 = new RpcResult<String>();
      rpcResult1.canEqual(object0);
      assertEquals((-1), (int)rpcResult1.getCode());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RpcResult<String> rpcResult0 = new RpcResult<String>();
      rpcResult0.getMsg();
      assertEquals((-1), (int)rpcResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RpcResult<Object> rpcResult0 = new RpcResult<Object>();
      Integer integer0 = rpcResult0.getCode();
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RpcResult<String> rpcResult0 = new RpcResult<String>();
      rpcResult0.setData("sOX");
      rpcResult0.setMsg("");
      RpcResult<Object> rpcResult1 = new RpcResult<Object>();
      rpcResult1.setData("sOX");
      rpcResult1.setMsg("");
      boolean boolean0 = rpcResult0.equals(rpcResult1);
      assertTrue(boolean0);
      assertEquals((-1), (int)rpcResult1.getCode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RpcResult<Integer> rpcResult0 = new RpcResult<Integer>();
      Integer integer0 = new Integer(78);
      rpcResult0.setData(integer0);
      RpcResult<String> rpcResult1 = new RpcResult<String>();
      boolean boolean0 = rpcResult1.equals(rpcResult0);
      assertEquals((-1), (int)rpcResult1.getCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RpcResult<String> rpcResult0 = new RpcResult<String>();
      rpcResult0.setMsg("eNIet%kO[h");
      rpcResult0.setData("RpcResult(code=-1, msg=null, data=null)");
      RpcResult<RpcResult<Object>> rpcResult1 = new RpcResult<RpcResult<Object>>();
      rpcResult1.setMsg("eNIet%kO[h");
      boolean boolean0 = rpcResult0.equals(rpcResult1);
      assertFalse(boolean0);
      assertEquals((-1), (int)rpcResult1.getCode());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RpcResult<String> rpcResult0 = new RpcResult<String>();
      rpcResult0.setMsg("eNIet%kO[h");
      RpcResult<RpcResult<Object>> rpcResult1 = new RpcResult<RpcResult<Object>>();
      rpcResult1.setMsg("eNIet%kO[h");
      boolean boolean0 = rpcResult0.equals(rpcResult1);
      assertTrue(boolean0);
      assertEquals((-1), (int)rpcResult1.getCode());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RpcResult<String> rpcResult0 = new RpcResult<String>();
      rpcResult0.setCode((Integer) null);
      RpcResult<Object> rpcResult1 = new RpcResult<Object>();
      rpcResult1.setMsg("Hojs843<");
      assertEquals((-1), (int)rpcResult1.getCode());
      
      rpcResult1.setCode((Integer) null);
      boolean boolean0 = rpcResult0.equals(rpcResult1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RpcResult<String> rpcResult0 = new RpcResult<String>();
      rpcResult0.setMsg("eNIet%kO[h");
      RpcResult<RpcResult<Object>> rpcResult1 = new RpcResult<RpcResult<Object>>();
      boolean boolean0 = rpcResult0.equals(rpcResult1);
      assertFalse(boolean0);
      assertEquals((-1), (int)rpcResult1.getCode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((-5));
      RpcResult<String> rpcResult0 = new RpcResult<String>();
      assertEquals((-1), (int)rpcResult0.getCode());
      
      rpcResult0.setCode(integer0);
      RpcResult<RpcResult<Object>> rpcResult1 = new RpcResult<RpcResult<Object>>();
      boolean boolean0 = rpcResult0.equals(rpcResult1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RpcResult<String> rpcResult0 = new RpcResult<String>();
      rpcResult0.setCode((Integer) null);
      RpcResult<Object> rpcResult1 = new RpcResult<Object>();
      boolean boolean0 = rpcResult0.equals(rpcResult1);
      assertEquals((-1), (int)rpcResult1.getCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RpcResult<RpcResult<Object>> rpcResult0 = new RpcResult<RpcResult<Object>>();
      boolean boolean0 = rpcResult0.equals("RpcResult(code=-1, msg=null, data=null)");
      assertFalse(boolean0);
      assertEquals((-1), (int)rpcResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RpcResult<String> rpcResult0 = new RpcResult<String>();
      rpcResult0.setCode((Integer) null);
      rpcResult0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RpcResult<Integer> rpcResult0 = new RpcResult<Integer>();
      rpcResult0.hashCode();
      assertEquals((-1), (int)rpcResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RpcResult<Object> rpcResult0 = new RpcResult<Object>();
      rpcResult0.setMsg("RpcResult(code=-1, msg=null, data=null)");
      rpcResult0.hashCode();
      assertEquals((-1), (int)rpcResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RpcResult<Integer> rpcResult0 = new RpcResult<Integer>();
      Integer integer0 = new Integer(53);
      rpcResult0.setData(integer0);
      rpcResult0.hashCode();
      assertEquals((-1), (int)rpcResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RpcResult<Integer> rpcResult0 = new RpcResult<Integer>();
      String string0 = rpcResult0.toString();
      assertEquals("RpcResult(code=-1, msg=null, data=null)", string0);
  }
}
