/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Tue Oct 26 11:22:58 GMT 2021
 */

package com.sunjinghao.shorturl.common.aop;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class LogAspect_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.sunjinghao.shorturl.common.aop.LogAspect"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "GBK"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "C:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\"); 
    java.lang.System.setProperty("user.country", "CN"); 
    java.lang.System.setProperty("user.dir", "F:\\java-code\\shorturl-project\\short-url-common"); 
    java.lang.System.setProperty("user.home", "C:\\Users\\Administrator"); 
    java.lang.System.setProperty("user.language", "zh"); 
    java.lang.System.setProperty("user.name", "Administrator"); 
    java.lang.System.setProperty("user.timezone", "Asia/Shanghai"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(LogAspect_ESTest_scaffolding.class.getClassLoader() ,
      "org.springframework.core.ParameterNameDiscoverer",
      "org.aspectj.lang.reflect.SourceLocation",
      "org.springframework.util.ConcurrentReferenceHashMap$Reference",
      "org.springframework.util.ConcurrentReferenceHashMap$Segment",
      "org.springframework.asm.ClassVisitor",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager",
      "org.aopalliance.intercept.Joinpoint",
      "org.springframework.util.ConcurrentReferenceHashMap",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceType",
      "org.springframework.core.KotlinDetector",
      "org.aopalliance.intercept.MethodInvocation",
      "org.aspectj.lang.annotation.Aspect",
      "org.aspectj.lang.JoinPoint$StaticPart",
      "org.springframework.stereotype.Indexed",
      "org.springframework.lang.Nullable",
      "org.aspectj.lang.reflect.CodeSignature",
      "org.aspectj.lang.JoinPoint",
      "org.springframework.util.ConcurrentReferenceHashMap$1",
      "org.springframework.util.ConcurrentReferenceHashMap$2",
      "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint",
      "org.springframework.util.ConcurrentReferenceHashMap$3",
      "org.springframework.util.ClassUtils",
      "org.springframework.util.ConcurrentReferenceHashMap$4",
      "org.springframework.core.LocalVariableTableParameterNameDiscoverer$ParameterNameDiscoveringVisitor",
      "org.aspectj.lang.Signature",
      "org.springframework.core.PrioritizedParameterNameDiscoverer",
      "org.springframework.core.StandardReflectionParameterNameDiscoverer",
      "org.aopalliance.intercept.Invocation",
      "com.sunjinghao.shorturl.common.aop.LogAspect",
      "org.springframework.core.LocalVariableTableParameterNameDiscoverer",
      "org.springframework.stereotype.Component",
      "org.springframework.core.DefaultParameterNameDiscoverer",
      "org.aspectj.runtime.internal.AroundClosure",
      "org.aspectj.lang.reflect.MethodSignature",
      "org.springframework.aop.ProxyMethodInvocation",
      "org.springframework.util.ConcurrentReferenceHashMap$Task",
      "org.springframework.util.ConcurrentReferenceHashMap$5",
      "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl",
      "org.aspectj.lang.ProceedingJoinPoint",
      "org.springframework.util.Assert",
      "org.aspectj.lang.reflect.MemberSignature"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("org.aopalliance.intercept.MethodInvocation", false, LogAspect_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.springframework.aop.ProxyMethodInvocation", false, LogAspect_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(LogAspect_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.sunjinghao.shorturl.common.aop.LogAspect",
      "org.springframework.core.PrioritizedParameterNameDiscoverer",
      "org.springframework.core.DefaultParameterNameDiscoverer",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceType",
      "org.springframework.util.ConcurrentReferenceHashMap",
      "org.springframework.util.Assert",
      "org.springframework.util.ConcurrentReferenceHashMap$Segment",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager",
      "org.springframework.util.ClassUtils",
      "org.springframework.core.KotlinDetector",
      "org.springframework.core.StandardReflectionParameterNameDiscoverer",
      "org.springframework.core.LocalVariableTableParameterNameDiscoverer",
      "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint",
      "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl",
      "org.aspectj.runtime.internal.AroundClosure",
      "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$SourceLocationImpl"
    );
  }
}
