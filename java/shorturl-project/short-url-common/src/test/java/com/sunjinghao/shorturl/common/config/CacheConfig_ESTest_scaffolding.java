/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Tue Oct 26 11:22:12 GMT 2021
 */

package com.sunjinghao.shorturl.common.config;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class CacheConfig_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.sunjinghao.shorturl.common.config.CacheConfig"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "GBK"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "C:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\"); 
    java.lang.System.setProperty("user.country", "CN"); 
    java.lang.System.setProperty("user.dir", "F:\\java-code\\shorturl-project\\short-url-common"); 
    java.lang.System.setProperty("user.home", "C:\\Users\\Administrator"); 
    java.lang.System.setProperty("user.language", "zh"); 
    java.lang.System.setProperty("user.name", "Administrator"); 
    java.lang.System.setProperty("user.timezone", "Asia/Shanghai"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CacheConfig_ESTest_scaffolding.class.getClassLoader() ,
      "com.github.benmanes.caffeine.cache.AsyncCache",
      "com.github.benmanes.caffeine.cache.Ticker",
      "com.github.benmanes.caffeine.cache.PSWMS",
      "com.github.benmanes.caffeine.cache.BaseMpscLinkedArrayQueueConsumerFields",
      "com.github.benmanes.caffeine.cache.Scheduler",
      "com.github.benmanes.caffeine.cache.UnboundedLocalCache$UnboundedLocalAsyncLoadingCache",
      "com.github.benmanes.caffeine.cache.LocalAsyncCache",
      "com.github.benmanes.caffeine.cache.DisabledScheduler",
      "com.github.benmanes.caffeine.cache.Weigher",
      "com.github.benmanes.caffeine.cache.AbstractLinkedDeque",
      "com.github.benmanes.caffeine.cache.LocalCacheFactory",
      "com.github.benmanes.caffeine.cache.BoundedLocalCache$PerformCleanupTask",
      "com.github.benmanes.caffeine.cache.BaseMpscLinkedArrayQueueColdProducerFields",
      "com.github.benmanes.caffeine.cache.Expiry",
      "com.github.benmanes.caffeine.cache.PS",
      "com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedLocalAsyncLoadingCache",
      "com.github.benmanes.caffeine.cache.LinkedDeque$PeekingIterator",
      "com.github.benmanes.caffeine.cache.RemovalListener",
      "com.github.benmanes.caffeine.cache.LinkedDeque",
      "com.github.benmanes.caffeine.cache.Node",
      "com.github.benmanes.caffeine.cache.BLCHeader$PadDrainStatus",
      "com.github.benmanes.caffeine.cache.BaseMpscLinkedArrayQueuePad1",
      "com.github.benmanes.caffeine.cache.BaseMpscLinkedArrayQueuePad2",
      "com.github.benmanes.caffeine.cache.stats.ConcurrentStatsCounter",
      "com.github.benmanes.caffeine.cache.BaseMpscLinkedArrayQueuePad3",
      "com.github.benmanes.caffeine.cache.SS",
      "com.github.benmanes.caffeine.cache.LoadingCache",
      "com.github.benmanes.caffeine.cache.SystemTicker",
      "com.github.benmanes.caffeine.cache.LocalAsyncLoadingCache",
      "org.springframework.context.annotation.Configuration",
      "com.github.benmanes.caffeine.cache.SSMSW",
      "com.github.benmanes.caffeine.cache.WriteOrderDeque",
      "com.github.benmanes.caffeine.cache.NodeFactory",
      "com.github.benmanes.caffeine.cache.LocalCache",
      "com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedLocalLoadingCache",
      "com.github.benmanes.caffeine.cache.LocalManualCache",
      "com.github.benmanes.caffeine.cache.stats.CacheStats",
      "com.github.benmanes.caffeine.cache.UnsafeAccess",
      "com.github.benmanes.caffeine.cache.Buffer",
      "com.github.benmanes.caffeine.cache.CacheLoader",
      "com.sunjinghao.shorturl.common.config.CacheConfig",
      "com.github.benmanes.caffeine.cache.BoundedBuffer",
      "com.github.benmanes.caffeine.cache.Cache",
      "com.github.benmanes.caffeine.cache.DisabledWriter",
      "com.github.benmanes.caffeine.cache.BaseMpscLinkedArrayQueueProducerFields",
      "com.github.benmanes.caffeine.cache.MpscChunkedArrayQueueColdProducerFields",
      "com.github.benmanes.caffeine.cache.BLCHeader$DrainStatusRef",
      "com.github.benmanes.caffeine.cache.CacheWriter",
      "com.github.benmanes.caffeine.cache.FrequencySketch",
      "com.github.benmanes.caffeine.cache.AsyncCacheLoader",
      "com.github.benmanes.caffeine.cache.MpscChunkedArrayQueue",
      "com.github.benmanes.caffeine.cache.Policy",
      "org.springframework.cache.annotation.EnableCaching",
      "com.github.benmanes.caffeine.cache.stats.StatsCounter",
      "com.github.benmanes.caffeine.cache.Caffeine",
      "com.github.benmanes.caffeine.cache.AccessOrderDeque",
      "org.springframework.context.annotation.AdviceMode",
      "org.springframework.context.annotation.Import",
      "com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedPolicy",
      "com.github.benmanes.caffeine.cache.LocalLoadingCache",
      "com.github.benmanes.caffeine.cache.BaseMpscLinkedArrayQueue",
      "com.github.benmanes.caffeine.cache.StripedBuffer",
      "com.github.benmanes.caffeine.cache.AccessOrderDeque$AccessOrder",
      "com.github.benmanes.caffeine.cache.SingletonWeigher",
      "org.springframework.stereotype.Component",
      "com.github.benmanes.caffeine.cache.AsyncLoadingCache",
      "com.github.benmanes.caffeine.cache.PSW",
      "com.github.benmanes.caffeine.cache.References$WeakKeyReference",
      "com.github.benmanes.caffeine.cache.References$InternalReference",
      "com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedLocalAsyncCache",
      "com.github.benmanes.caffeine.cache.BoundedLocalCache",
      "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueue",
      "com.github.benmanes.caffeine.cache.SSMS",
      "com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedLocalManualCache",
      "com.github.benmanes.caffeine.cache.WriteOrderDeque$WriteOrder"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CacheConfig_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.sunjinghao.shorturl.common.config.CacheConfig",
      "org.springframework.context.annotation.AdviceMode",
      "org.springframework.beans.factory.annotation.Autowire",
      "com.github.benmanes.caffeine.cache.Caffeine",
      "com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedLocalManualCache",
      "com.github.benmanes.caffeine.cache.LocalCacheFactory",
      "com.github.benmanes.caffeine.cache.BLCHeader$PadDrainStatus",
      "com.github.benmanes.caffeine.cache.UnsafeAccess",
      "com.github.benmanes.caffeine.cache.BLCHeader$DrainStatusRef",
      "com.github.benmanes.caffeine.cache.BoundedLocalCache",
      "com.github.benmanes.caffeine.cache.SS",
      "com.github.benmanes.caffeine.cache.SSMS",
      "com.github.benmanes.caffeine.cache.SSMSW",
      "com.github.benmanes.caffeine.cache.DisabledWriter",
      "com.github.benmanes.caffeine.cache.SingletonWeigher",
      "com.github.benmanes.caffeine.cache.BoundedLocalCache$PerformCleanupTask",
      "com.github.benmanes.caffeine.cache.References$WeakKeyReference",
      "com.github.benmanes.caffeine.cache.NodeFactory",
      "com.github.benmanes.caffeine.cache.Node",
      "com.github.benmanes.caffeine.cache.PS",
      "com.github.benmanes.caffeine.cache.PSW",
      "com.github.benmanes.caffeine.cache.PSWMS",
      "com.github.benmanes.caffeine.cache.StripedBuffer",
      "com.github.benmanes.caffeine.cache.BoundedBuffer",
      "com.github.benmanes.caffeine.cache.FrequencySketch",
      "com.github.benmanes.caffeine.cache.AbstractLinkedDeque",
      "com.github.benmanes.caffeine.cache.AccessOrderDeque",
      "com.github.benmanes.caffeine.cache.BaseMpscLinkedArrayQueuePad1",
      "com.github.benmanes.caffeine.cache.BaseMpscLinkedArrayQueueProducerFields",
      "com.github.benmanes.caffeine.cache.BaseMpscLinkedArrayQueuePad2",
      "com.github.benmanes.caffeine.cache.BaseMpscLinkedArrayQueueConsumerFields",
      "com.github.benmanes.caffeine.cache.BaseMpscLinkedArrayQueuePad3",
      "com.github.benmanes.caffeine.cache.BaseMpscLinkedArrayQueueColdProducerFields",
      "com.github.benmanes.caffeine.cache.BaseMpscLinkedArrayQueue",
      "com.github.benmanes.caffeine.cache.MpscChunkedArrayQueueColdProducerFields",
      "com.github.benmanes.caffeine.cache.MpscChunkedArrayQueue",
      "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueue",
      "com.github.benmanes.caffeine.cache.SystemTicker",
      "com.github.benmanes.caffeine.cache.WriteOrderDeque",
      "com.github.benmanes.caffeine.cache.DisabledScheduler"
    );
  }
}
