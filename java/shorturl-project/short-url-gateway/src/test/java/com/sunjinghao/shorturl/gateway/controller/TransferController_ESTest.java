/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 11:34:27 GMT 2021
 */

package com.sunjinghao.shorturl.gateway.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.sunjinghao.shorturl.api.bo.DomainMappingInfoBo;
import com.sunjinghao.shorturl.api.vo.DomainMappingInfoVo;
import com.sunjinghao.shorturl.common.result.GlobalHttpResult;
import com.sunjinghao.shorturl.gateway.controller.TransferController;
import com.sunjinghao.shorturl.gateway.domain.IUrlTransferService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransferController_ESTest extends TransferController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TransferController transferController0 = new TransferController();
      IUrlTransferService iUrlTransferService0 = mock(IUrlTransferService.class, new ViolatedAssumptionAnswer());
      Injector.inject(transferController0, (Class<?>) TransferController.class, "urlTransferService", (Object) iUrlTransferService0);
      Injector.validateBean(transferController0, (Class<?>) TransferController.class);
      // Undeclared exception!
      try { 
        transferController0.getShortUrl((DomainMappingInfoVo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.sunjinghao.shorturl.gateway.controller.TransferController", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TransferController transferController0 = new TransferController();
      IUrlTransferService iUrlTransferService0 = mock(IUrlTransferService.class, new ViolatedAssumptionAnswer());
      doReturn((DomainMappingInfoBo) null).when(iUrlTransferService0).getLongUrlByShortCode(any(com.sunjinghao.shorturl.api.bo.DomainMappingInfoBo.class));
      Injector.inject(transferController0, (Class<?>) TransferController.class, "urlTransferService", (Object) iUrlTransferService0);
      Injector.validateBean(transferController0, (Class<?>) TransferController.class);
      GlobalHttpResult<DomainMappingInfoBo> globalHttpResult0 = transferController0.getLongUrl("wNzHGSq");
      assertEquals(200, (int)globalHttpResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DomainMappingInfoVo domainMappingInfoVo0 = new DomainMappingInfoVo();
      TransferController transferController0 = new TransferController();
      IUrlTransferService iUrlTransferService0 = mock(IUrlTransferService.class, new ViolatedAssumptionAnswer());
      doReturn((DomainMappingInfoBo) null).when(iUrlTransferService0).longUrlMappingShortCode(any(com.sunjinghao.shorturl.api.bo.DomainMappingInfoBo.class));
      Injector.inject(transferController0, (Class<?>) TransferController.class, "urlTransferService", (Object) iUrlTransferService0);
      Injector.validateBean(transferController0, (Class<?>) TransferController.class);
      GlobalHttpResult<DomainMappingInfoBo> globalHttpResult0 = transferController0.getShortUrl(domainMappingInfoVo0);
      assertEquals(200, (int)globalHttpResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TransferController transferController0 = new TransferController();
      IUrlTransferService iUrlTransferService0 = mock(IUrlTransferService.class, new ViolatedAssumptionAnswer());
      Injector.inject(transferController0, (Class<?>) TransferController.class, "urlTransferService", (Object) iUrlTransferService0);
      Injector.validateBean(transferController0, (Class<?>) TransferController.class);
      GlobalHttpResult<DomainMappingInfoBo> globalHttpResult0 = transferController0.getLongUrl("");
      assertEquals("code can not be empty or null", globalHttpResult0.getMessage());
  }
}
