/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 11:33:03 GMT 2021
 */

package com.sunjinghao.shorturl.gateway.domain.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.sunjinghao.shorturl.api.bo.DomainMappingInfoBo;
import com.sunjinghao.shorturl.common.result.RpcResult;
import com.sunjinghao.shorturl.gateway.domain.impl.UrlTransferService;
import com.sunjinghao.shorturl.service.dao.IUrlDao;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UrlTransferService_ESTest extends UrlTransferService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UrlTransferService urlTransferService0 = new UrlTransferService();
      IUrlDao<Object> iUrlDao0 = (IUrlDao<Object>) mock(IUrlDao.class, new ViolatedAssumptionAnswer());
      doReturn((RpcResult) null).when(iUrlDao0).save(any());
      Injector.inject(urlTransferService0, (Class<?>) UrlTransferService.class, "urlDao", (Object) iUrlDao0);
      Injector.validateBean(urlTransferService0, (Class<?>) UrlTransferService.class);
      DomainMappingInfoBo domainMappingInfoBo0 = new DomainMappingInfoBo();
      // Undeclared exception!
      try { 
        urlTransferService0.longUrlMappingShortCode(domainMappingInfoBo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.sunjinghao.shorturl.gateway.domain.impl.UrlTransferService", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UrlTransferService urlTransferService0 = new UrlTransferService();
      RpcResult<Object> rpcResult0 = (RpcResult<Object>) mock(RpcResult.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(rpcResult0).getCode();
      IUrlDao<Object> iUrlDao0 = (IUrlDao<Object>) mock(IUrlDao.class, new ViolatedAssumptionAnswer());
      doReturn(rpcResult0).when(iUrlDao0).save(any());
      Injector.inject(urlTransferService0, (Class<?>) UrlTransferService.class, "urlDao", (Object) iUrlDao0);
      Injector.validateBean(urlTransferService0, (Class<?>) UrlTransferService.class);
      // Undeclared exception!
      try { 
        urlTransferService0.longUrlMappingShortCode((DomainMappingInfoBo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.sunjinghao.shorturl.gateway.domain.impl.UrlTransferService", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UrlTransferService urlTransferService0 = new UrlTransferService();
      Integer integer0 = new Integer((-533));
      RpcResult<Object> rpcResult0 = (RpcResult<Object>) mock(RpcResult.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(rpcResult0).getCode();
      Integer integer1 = new Integer(200);
      RpcResult<Object> rpcResult1 = (RpcResult<Object>) mock(RpcResult.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(rpcResult1).getCode();
      RpcResult<Object> rpcResult2 = (RpcResult<Object>) mock(RpcResult.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, integer0, integer1).when(rpcResult2).getCode();
      doReturn(integer1).when(rpcResult2).getData();
      IUrlDao<Object> iUrlDao0 = (IUrlDao<Object>) mock(IUrlDao.class, new ViolatedAssumptionAnswer());
      doReturn(rpcResult1, rpcResult2).when(iUrlDao0).getByCode(any(com.sunjinghao.shorturl.api.dto.DomainMappingInfoDto.class));
      doReturn(rpcResult0, rpcResult2, rpcResult2).when(iUrlDao0).save(any());
      Injector.inject(urlTransferService0, (Class<?>) UrlTransferService.class, "urlDao", (Object) iUrlDao0);
      Injector.validateBean(urlTransferService0, (Class<?>) UrlTransferService.class);
      DomainMappingInfoBo domainMappingInfoBo0 = new DomainMappingInfoBo();
      DomainMappingInfoBo domainMappingInfoBo1 = urlTransferService0.longUrlMappingShortCode(domainMappingInfoBo0);
      DomainMappingInfoBo domainMappingInfoBo2 = urlTransferService0.longUrlMappingShortCode(domainMappingInfoBo1);
      urlTransferService0.longUrlMappingShortCode(domainMappingInfoBo2);
      urlTransferService0.getLongUrlByShortCode(domainMappingInfoBo2);
      DomainMappingInfoBo domainMappingInfoBo3 = urlTransferService0.getLongUrlByShortCode(domainMappingInfoBo1);
      assertSame(domainMappingInfoBo3, domainMappingInfoBo2);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UrlTransferService urlTransferService0 = new UrlTransferService();
      Integer integer0 = new Integer((-472));
      RpcResult<Object> rpcResult0 = (RpcResult<Object>) mock(RpcResult.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(rpcResult0).getCode();
      Integer integer1 = new Integer(200);
      RpcResult<Object> rpcResult1 = (RpcResult<Object>) mock(RpcResult.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(rpcResult1).getCode();
      RpcResult<Object> rpcResult2 = (RpcResult<Object>) mock(RpcResult.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, integer0, integer1).when(rpcResult2).getCode();
      doReturn((Object) null).when(rpcResult2).getData();
      IUrlDao<Object> iUrlDao0 = (IUrlDao<Object>) mock(IUrlDao.class, new ViolatedAssumptionAnswer());
      doReturn(rpcResult1, rpcResult2).when(iUrlDao0).getByCode(any(com.sunjinghao.shorturl.api.dto.DomainMappingInfoDto.class));
      doReturn(rpcResult0, rpcResult2, rpcResult2).when(iUrlDao0).save(any());
      Injector.inject(urlTransferService0, (Class<?>) UrlTransferService.class, "urlDao", (Object) iUrlDao0);
      Injector.validateBean(urlTransferService0, (Class<?>) UrlTransferService.class);
      DomainMappingInfoBo domainMappingInfoBo0 = new DomainMappingInfoBo();
      DomainMappingInfoBo domainMappingInfoBo1 = urlTransferService0.longUrlMappingShortCode(domainMappingInfoBo0);
      DomainMappingInfoBo domainMappingInfoBo2 = urlTransferService0.getLongUrlByShortCode(domainMappingInfoBo1);
      DomainMappingInfoBo domainMappingInfoBo3 = urlTransferService0.longUrlMappingShortCode(domainMappingInfoBo2);
      urlTransferService0.getLongUrlByShortCode(domainMappingInfoBo3);
      DomainMappingInfoBo domainMappingInfoBo4 = urlTransferService0.longUrlMappingShortCode(domainMappingInfoBo2);
      assertSame(domainMappingInfoBo4, domainMappingInfoBo2);
  }
}
