/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 11:30:59 GMT 2021
 */

package com.sunjinghao.shorturl.service.cache.load;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.benmanes.caffeine.cache.Cache;
import com.sunjinghao.shorturl.api.dto.DomainMappingInfoDto;
import com.sunjinghao.shorturl.service.cache.load.ShortCodeCache;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ShortCodeCache_ESTest extends ShortCodeCache_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ShortCodeCache shortCodeCache0 = new ShortCodeCache();
      Cache<Integer, String> cache0 = (Cache<Integer, String>) mock(Cache.class, new ViolatedAssumptionAnswer());
      Injector.inject(shortCodeCache0, (Class<?>) ShortCodeCache.class, "caffeineCache", (Object) cache0);
      Injector.validateBean(shortCodeCache0, (Class<?>) ShortCodeCache.class);
      // Undeclared exception!
      try { 
        shortCodeCache0.getByLongUrl((DomainMappingInfoDto) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.sunjinghao.shorturl.service.cache.load.ShortCodeCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ShortCodeCache shortCodeCache0 = new ShortCodeCache();
      Object object0 = new Object();
      Cache<DomainMappingInfoDto, Object> cache0 = (Cache<DomainMappingInfoDto, Object>) mock(Cache.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(cache0).getIfPresent(any());
      Injector.inject(shortCodeCache0, (Class<?>) ShortCodeCache.class, "caffeineCache", (Object) cache0);
      Injector.validateBean(shortCodeCache0, (Class<?>) ShortCodeCache.class);
      DomainMappingInfoDto domainMappingInfoDto0 = new DomainMappingInfoDto();
      // Undeclared exception!
      try { 
        shortCodeCache0.getByLongUrl(domainMappingInfoDto0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to com.sunjinghao.shorturl.api.dto.DomainMappingInfoDto
         //
         verifyException("com.sunjinghao.shorturl.service.cache.load.ShortCodeCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ShortCodeCache shortCodeCache0 = new ShortCodeCache();
      Cache<ShortCodeCache, ShortCodeCache> cache0 = (Cache<ShortCodeCache, ShortCodeCache>) mock(Cache.class, new ViolatedAssumptionAnswer());
      Injector.inject(shortCodeCache0, (Class<?>) ShortCodeCache.class, "caffeineCache", (Object) cache0);
      Injector.validateBean(shortCodeCache0, (Class<?>) ShortCodeCache.class);
      // Undeclared exception!
      try { 
        shortCodeCache0.getByCode((DomainMappingInfoDto) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.sunjinghao.shorturl.service.cache.load.ShortCodeCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ShortCodeCache shortCodeCache0 = new ShortCodeCache();
      Cache<Integer, Object> cache0 = (Cache<Integer, Object>) mock(Cache.class, new ViolatedAssumptionAnswer());
      doReturn("{ElBA;2K").when(cache0).getIfPresent(any());
      Injector.inject(shortCodeCache0, (Class<?>) ShortCodeCache.class, "caffeineCache", (Object) cache0);
      Injector.validateBean(shortCodeCache0, (Class<?>) ShortCodeCache.class);
      DomainMappingInfoDto domainMappingInfoDto0 = new DomainMappingInfoDto();
      // Undeclared exception!
      try { 
        shortCodeCache0.getByCode(domainMappingInfoDto0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.sunjinghao.shorturl.api.dto.DomainMappingInfoDto
         //
         verifyException("com.sunjinghao.shorturl.service.cache.load.ShortCodeCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ShortCodeCache shortCodeCache0 = new ShortCodeCache();
      Cache<Integer, Integer> cache0 = (Cache<Integer, Integer>) mock(Cache.class, new ViolatedAssumptionAnswer());
      Injector.inject(shortCodeCache0, (Class<?>) ShortCodeCache.class, "caffeineCache", (Object) cache0);
      Injector.validateBean(shortCodeCache0, (Class<?>) ShortCodeCache.class);
      // Undeclared exception!
      try { 
        shortCodeCache0.delete((DomainMappingInfoDto) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.sunjinghao.shorturl.service.cache.load.ShortCodeCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ShortCodeCache shortCodeCache0 = new ShortCodeCache();
      Cache<Integer, String> cache0 = (Cache<Integer, String>) mock(Cache.class, new ViolatedAssumptionAnswer());
      Injector.inject(shortCodeCache0, (Class<?>) ShortCodeCache.class, "caffeineCache", (Object) cache0);
      Injector.validateBean(shortCodeCache0, (Class<?>) ShortCodeCache.class);
      // Undeclared exception!
      try { 
        shortCodeCache0.add((DomainMappingInfoDto) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.sunjinghao.shorturl.service.cache.load.ShortCodeCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ShortCodeCache shortCodeCache0 = new ShortCodeCache();
      Object object0 = new Object();
      Cache<Object, Object> cache0 = (Cache<Object, Object>) mock(Cache.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(cache0).getIfPresent(any());
      Injector.inject(shortCodeCache0, (Class<?>) ShortCodeCache.class, "caffeineCache", (Object) cache0);
      Injector.validateBean(shortCodeCache0, (Class<?>) ShortCodeCache.class);
      DomainMappingInfoDto domainMappingInfoDto0 = new DomainMappingInfoDto();
      // Undeclared exception!
      try { 
        shortCodeCache0.add(domainMappingInfoDto0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to com.sunjinghao.shorturl.api.dto.DomainMappingInfoDto
         //
         verifyException("com.sunjinghao.shorturl.service.cache.load.ShortCodeCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ShortCodeCache shortCodeCache0 = new ShortCodeCache();
      Cache<Integer, DomainMappingInfoDto> cache0 = (Cache<Integer, DomainMappingInfoDto>) mock(Cache.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(cache0).getIfPresent(any());
      Injector.inject(shortCodeCache0, (Class<?>) ShortCodeCache.class, "caffeineCache", (Object) cache0);
      Injector.validateBean(shortCodeCache0, (Class<?>) ShortCodeCache.class);
      DomainMappingInfoDto domainMappingInfoDto0 = new DomainMappingInfoDto();
      DomainMappingInfoDto domainMappingInfoDto1 = shortCodeCache0.getByCode(domainMappingInfoDto0);
      assertNull(domainMappingInfoDto1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ShortCodeCache shortCodeCache0 = new ShortCodeCache();
      DomainMappingInfoDto domainMappingInfoDto0 = new DomainMappingInfoDto();
      Cache<Integer, DomainMappingInfoDto> cache0 = (Cache<Integer, DomainMappingInfoDto>) mock(Cache.class, new ViolatedAssumptionAnswer());
      doReturn(domainMappingInfoDto0).when(cache0).getIfPresent(any());
      Injector.inject(shortCodeCache0, (Class<?>) ShortCodeCache.class, "caffeineCache", (Object) cache0);
      Injector.validateBean(shortCodeCache0, (Class<?>) ShortCodeCache.class);
      DomainMappingInfoDto domainMappingInfoDto1 = shortCodeCache0.getByLongUrl(domainMappingInfoDto0);
      assertNull(domainMappingInfoDto1.getUrl());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ShortCodeCache shortCodeCache0 = new ShortCodeCache();
      Cache<Integer, String> cache0 = (Cache<Integer, String>) mock(Cache.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(cache0).getIfPresent(any());
      Injector.inject(shortCodeCache0, (Class<?>) ShortCodeCache.class, "caffeineCache", (Object) cache0);
      Injector.validateBean(shortCodeCache0, (Class<?>) ShortCodeCache.class);
      DomainMappingInfoDto domainMappingInfoDto0 = new DomainMappingInfoDto();
      DomainMappingInfoDto domainMappingInfoDto1 = shortCodeCache0.getByLongUrl(domainMappingInfoDto0);
      assertNull(domainMappingInfoDto1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ShortCodeCache shortCodeCache0 = new ShortCodeCache();
      DomainMappingInfoDto domainMappingInfoDto0 = new DomainMappingInfoDto();
      Cache<Integer, DomainMappingInfoDto> cache0 = (Cache<Integer, DomainMappingInfoDto>) mock(Cache.class, new ViolatedAssumptionAnswer());
      doReturn(domainMappingInfoDto0).when(cache0).getIfPresent(any());
      Injector.inject(shortCodeCache0, (Class<?>) ShortCodeCache.class, "caffeineCache", (Object) cache0);
      Injector.validateBean(shortCodeCache0, (Class<?>) ShortCodeCache.class);
      DomainMappingInfoDto domainMappingInfoDto1 = shortCodeCache0.getByCode(domainMappingInfoDto0);
      assertSame(domainMappingInfoDto1, domainMappingInfoDto0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ShortCodeCache shortCodeCache0 = new ShortCodeCache();
      Cache<DomainMappingInfoDto, Integer> cache0 = (Cache<DomainMappingInfoDto, Integer>) mock(Cache.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(cache0).getIfPresent(any());
      Injector.inject(shortCodeCache0, (Class<?>) ShortCodeCache.class, "caffeineCache", (Object) cache0);
      Injector.validateBean(shortCodeCache0, (Class<?>) ShortCodeCache.class);
      DomainMappingInfoDto domainMappingInfoDto0 = new DomainMappingInfoDto();
      DomainMappingInfoDto domainMappingInfoDto1 = shortCodeCache0.add(domainMappingInfoDto0);
      assertNull(domainMappingInfoDto1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ShortCodeCache shortCodeCache0 = new ShortCodeCache();
      DomainMappingInfoDto domainMappingInfoDto0 = new DomainMappingInfoDto();
      Cache<Integer, DomainMappingInfoDto> cache0 = (Cache<Integer, DomainMappingInfoDto>) mock(Cache.class, new ViolatedAssumptionAnswer());
      doReturn(domainMappingInfoDto0).when(cache0).getIfPresent(any());
      Injector.inject(shortCodeCache0, (Class<?>) ShortCodeCache.class, "caffeineCache", (Object) cache0);
      Injector.validateBean(shortCodeCache0, (Class<?>) ShortCodeCache.class);
      DomainMappingInfoDto domainMappingInfoDto1 = shortCodeCache0.add(domainMappingInfoDto0);
      assertNull(domainMappingInfoDto1.getId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ShortCodeCache shortCodeCache0 = new ShortCodeCache();
      Cache<Integer, DomainMappingInfoDto> cache0 = (Cache<Integer, DomainMappingInfoDto>) mock(Cache.class, new ViolatedAssumptionAnswer());
      Injector.inject(shortCodeCache0, (Class<?>) ShortCodeCache.class, "caffeineCache", (Object) cache0);
      Injector.validateBean(shortCodeCache0, (Class<?>) ShortCodeCache.class);
      DomainMappingInfoDto domainMappingInfoDto0 = new DomainMappingInfoDto();
      shortCodeCache0.delete(domainMappingInfoDto0);
      assertNull(domainMappingInfoDto0.getUrl());
  }
}
