/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 11:30:32 GMT 2021
 */

package com.sunjinghao.shorturl.service.dao.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.sunjinghao.shorturl.api.dto.DomainMappingInfoDto;
import com.sunjinghao.shorturl.common.result.RpcResult;
import com.sunjinghao.shorturl.service.cache.IShortCodeCache;
import com.sunjinghao.shorturl.service.dao.impl.UrlDao;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UrlDao_ESTest extends UrlDao_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UrlDao urlDao0 = new UrlDao();
      DomainMappingInfoDto domainMappingInfoDto0 = new DomainMappingInfoDto();
      IShortCodeCache iShortCodeCache0 = mock(IShortCodeCache.class, new ViolatedAssumptionAnswer());
      doReturn(domainMappingInfoDto0).when(iShortCodeCache0).getByLongUrl(any(com.sunjinghao.shorturl.api.dto.DomainMappingInfoDto.class));
      Injector.inject(urlDao0, (Class<?>) UrlDao.class, "shortCodeCache", (Object) iShortCodeCache0);
      Injector.validateBean(urlDao0, (Class<?>) UrlDao.class);
      DomainMappingInfoDto domainMappingInfoDto1 = new DomainMappingInfoDto();
      RpcResult<DomainMappingInfoDto> rpcResult0 = urlDao0.save(domainMappingInfoDto1);
      assertEquals(200, (int)rpcResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UrlDao urlDao0 = new UrlDao();
      IShortCodeCache iShortCodeCache0 = mock(IShortCodeCache.class, new ViolatedAssumptionAnswer());
      Injector.inject(urlDao0, (Class<?>) UrlDao.class, "shortCodeCache", (Object) iShortCodeCache0);
      Injector.validateBean(urlDao0, (Class<?>) UrlDao.class);
      RpcResult rpcResult0 = urlDao0.getByUrl((DomainMappingInfoDto) null);
      assertEquals("domainMappingInfoDto is null ", rpcResult0.getMsg());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UrlDao urlDao0 = new UrlDao();
      IShortCodeCache iShortCodeCache0 = mock(IShortCodeCache.class, new ViolatedAssumptionAnswer());
      Injector.inject(urlDao0, (Class<?>) UrlDao.class, "shortCodeCache", (Object) iShortCodeCache0);
      Injector.validateBean(urlDao0, (Class<?>) UrlDao.class);
      RpcResult rpcResult0 = urlDao0.getByCode((DomainMappingInfoDto) null);
      assertEquals("domainMappingInfoDto is null ", rpcResult0.getMsg());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UrlDao urlDao0 = new UrlDao();
      DomainMappingInfoDto domainMappingInfoDto0 = new DomainMappingInfoDto();
      IShortCodeCache iShortCodeCache0 = mock(IShortCodeCache.class, new ViolatedAssumptionAnswer());
      doReturn((DomainMappingInfoDto) null).when(iShortCodeCache0).getByCode(any(com.sunjinghao.shorturl.api.dto.DomainMappingInfoDto.class));
      Injector.inject(urlDao0, (Class<?>) UrlDao.class, "shortCodeCache", (Object) iShortCodeCache0);
      Injector.validateBean(urlDao0, (Class<?>) UrlDao.class);
      RpcResult rpcResult0 = urlDao0.getByCode(domainMappingInfoDto0);
      assertEquals("\u8BF7\u6C42\u6210\u529F", rpcResult0.getMsg());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UrlDao urlDao0 = new UrlDao();
      DomainMappingInfoDto domainMappingInfoDto0 = new DomainMappingInfoDto();
      IShortCodeCache iShortCodeCache0 = mock(IShortCodeCache.class, new ViolatedAssumptionAnswer());
      doReturn((DomainMappingInfoDto) null).when(iShortCodeCache0).add(any(com.sunjinghao.shorturl.api.dto.DomainMappingInfoDto.class));
      doReturn((DomainMappingInfoDto) null, (DomainMappingInfoDto) null, (DomainMappingInfoDto) null, domainMappingInfoDto0).when(iShortCodeCache0).getByLongUrl(any(com.sunjinghao.shorturl.api.dto.DomainMappingInfoDto.class));
      Injector.inject(urlDao0, (Class<?>) UrlDao.class, "shortCodeCache", (Object) iShortCodeCache0);
      Injector.validateBean(urlDao0, (Class<?>) UrlDao.class);
      urlDao0.getByUrl(domainMappingInfoDto0);
      urlDao0.getByUrl(domainMappingInfoDto0);
      RpcResult<DomainMappingInfoDto> rpcResult0 = urlDao0.save(domainMappingInfoDto0);
      RpcResult<DomainMappingInfoDto> rpcResult1 = urlDao0.save(domainMappingInfoDto0);
      assertFalse(rpcResult1.equals((Object)rpcResult0));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UrlDao urlDao0 = new UrlDao();
      IShortCodeCache iShortCodeCache0 = mock(IShortCodeCache.class, new ViolatedAssumptionAnswer());
      Injector.inject(urlDao0, (Class<?>) UrlDao.class, "shortCodeCache", (Object) iShortCodeCache0);
      Injector.validateBean(urlDao0, (Class<?>) UrlDao.class);
      RpcResult<DomainMappingInfoDto> rpcResult0 = urlDao0.save((DomainMappingInfoDto) null);
      assertEquals("domainMappingInfoDto is null ", rpcResult0.getMsg());
  }
}
