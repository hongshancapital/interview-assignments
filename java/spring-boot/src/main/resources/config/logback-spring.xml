<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true">
	<contextName>uias</contextName>
	<!--设置系统日志目录 -->
	<property name="LOG_PATH" value="/approot/tomcatlogs/errorlog" />
	<!-- 说明： 1、日志级别及文件 日志记录采用分级记录，级别与日志文件名相对应，不同级别的日志信息记录到不同的日志文件中 例如：error级别记录到log_error_xxx.log或log_error.log（该文件为当前记录的日志文件），而log_error_xxx.log为归档日志，
		日志文件按日期记录，同一天内，若日志文件大小等于或大于2M，则按0、1、2...顺序分别命名 例如log-level-2013-12-21.0.log 
		其它级别的日志也是如此。 2、文件路径 若开发、测试用，在Eclipse中运行项目，则到Eclipse的安装路径查找logs文件夹，以相对路径../logs。 
		若部署到Tomcat下，则在Tomcat下的logs文件中 3、Appender FILEERROR对应error级别，文件名以log-error-xxx.log形式命名 
		FILEWARN对应warn级别，文件名以log-warn-xxx.log形式命名 FILEINFO对应info级别，文件名以log-info-xxx.log形式命名 
		FILEDEBUG对应debug级别，文件名以log-debug-xxx.log形式命名 CONSOLE将日志信息输出到控制上，为方便开发测试使用 -->
	<!-- 日志记录器，日期滚动记录 -->
	<appender name="FILEERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 正在记录的日志文件的路径及文件名 -->
		<file>${LOG_PATH}/log_error.log</file>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。 
				而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
			<fileNamePattern>${LOG_PATH}/errorlog_bak/log_error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<maxHistory>2000</maxHistory>
			<totalSizeCap>200GB</totalSizeCap>
			<cleanHistoryOnStart>true</cleanHistoryOnStart>
			<!-- 除按日志记录之外，还配置了日志文件不能超过1GB，若超过1GB，日志文件会以索引0开始， 命名日志文件，例如log-error-2013-12-21.0.log -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>1GB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!-- 追加方式记录日志 -->
		<append>true</append>
		<!-- 日志文件的格式 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger : %msg%n</pattern>
			<charset>utf-8</charset>
		</encoder>
		<!-- 此日志文件只记录error级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>error</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>
	<appender name="FILEERROR_async" class="ch.qos.logback.classic.AsyncAppender">
		<appender-ref ref="FILEERROR" />
	</appender>

	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger : %msg%n</pattern>
			<charset>utf-8</charset>
		</encoder>
	</appender>
	<appender name="CONSOLE_async" class="ch.qos.logback.classic.AsyncAppender">
		<appender-ref ref="CONSOLE" />
	</appender>

	<!-- 生产环境 -->
	<springProfile name="pro">
		<root level="info">
			<appender-ref ref="FILEERROR_async"/>
			<appender-ref ref="CONSOLE_async" />
		</root>
	</springProfile>

	<!-- 测试环境 -->
	<springProfile name="test">
		<root level="info">
			<appender-ref ref="FILEERROR_async" />
			<appender-ref ref="CONSOLE_async" />
		</root>
	</springProfile>

	<!-- 开发环境 -->
	<springProfile name="dev">
		<root level="info">
			<appender-ref ref="FILEERROR_async" />
			<appender-ref ref="CONSOLE_async" />
		</root>
	</springProfile>
</configuration>
