<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true">
    <springProperty defaultValue="${user.dir}/logs" name="LOG_HOME"
                    scope="context"
                    source="logging.path"/>
    <springProperty defaultValue="localhost" name="LOG_NAME" scope="context"
                    source="spring.application.name"/>
    <appender name="FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>/${LOG_HOME}/${LOG_NAME}.log</file>
        <append>true</append>
        <rollingPolicy
                class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>
                /${LOG_HOME}/${LOG_NAME}-%d{yyyy-MM-dd}.%i.log.zip
            </fileNamePattern>
            <maxFileSize>100MB</maxFileSize>
            <maxHistory>7</maxHistory>
            <totalSizeCap>3GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} [%level:%thread] [%logger:%line] - %msg%n
            </pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <level>WARN</level>
            <level>INFO</level>
            <level>ERROR</level>
        </filter>
    </appender>
    <!-- Console output -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} [%level:%thread] [%logger:%line] - %msg%n
            </pattern>
            <charset>UTF-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <level>WARN</level>
            <level>INFO</level>
            <level>ERROR</level>
        </filter>
    </appender>
    <!-- 异步输出 -->
    <appender name="ASYNC-STDOUT" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <!-- 新增这行为了打印栈堆信息 -->
        <includeCallerData>true</includeCallerData>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="STDOUT"/>
    </appender>

    <appender name="ASYNC-FILE" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <!-- 新增这行为了打印栈堆信息 -->
        <includeCallerData>true</includeCallerData>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="FILE"/>
    </appender>

    <root level="INFO">
        <appender-ref ref="ASYNC-FILE"/>
        <appender-ref ref="ASYNC-STDOUT"/>
    </root>

    <springProfile name="PROD">
        <root level="INFO">
            <appender-ref ref="ASYNC-FILE"/>
        </root>
    </springProfile>

    <springProfile name="DEV">
        <root level="INFO">
            <appender-ref ref="ASYNC-STDOUT"/>
        </root>
    </springProfile>

    <springProfile name="TEST">
        <root level="INFO">
            <appender-ref ref="ASYNC-STDOUT"/>
        </root>
    </springProfile>

    <logger name="org.apache.ibatis" level="TRACE"/>
    <logger name="java.sql.Connection" level="DEBUG"/>
    <logger name="java.sql.Statement" level="DEBUG"/>
    <logger name="java.sql.PreparedStatement" level="DEBUG"/>
    <logger name="org.springframework" level="INFO"/>
    <!--启动日志中打印请求路径列表-->
    <logger name="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" level="TRACE"/>
    <logger name="com.netflix" level="WARN"/>
    <logger name="org" level="INFO"/>
</configuration>