package indi.zixiu.shortdomainname.service;

public class ShortDomainNameGenerator {
    // ==============================Fields===========================================
    /**
     * Start time cut-off (2022-01-21 00:13:43 GMT+0800)
     */
    private final long shortDomainNameServiceEpoch = 1642695223000L;

    /**
     * Number of digits occupied by machine id
     */
    public final long workerIdBits = 3L;

    /**
     * The number of digits occupied by the data identifier id
     */
    public final long datacenterIdBits = 1L;

    /**
     * Supported maximum machine id, the result is 31 (this shift algorithm can quickly calculate the maximum decimal number represented by several bits of binary number)
     */
    private final long maxWorkerId = -1L ^ (-1L << workerIdBits);

    /**
     * Supported maximum data identifier id, resulting in 31
     */
    private final long maxDatacenterId = -1L ^ (-1L << datacenterIdBits);

    /**
     * Number of digits in id of sequence
     */
    public final long sequenceBits = 2L;

    /**
     * Machine ID moved 12 bits to the left
     */
    public final long workerIdShift = sequenceBits;

    /**
     * Data id moved 17 bits to the left (12 + 5)
     */
    public final long datacenterIdShift = sequenceBits + workerIdBits;

    /**
     * Time truncation moves 22 bits to the left (5 + 5 + 12)
     */
    public final long timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;

    /**
     * The mask of the generated sequence is 4095 (0b111111111111111111111 = 0xfff = 4095)
     */
    private final long sequenceMask = -1L ^ (-1L << sequenceBits);

    /**
     * Work Machine ID (0-31)
     */
    private long workerId;

    /**
     * Data Center ID (0-31)
     */
    private long datacenterId;

    /**
     * Sequences in milliseconds (0-4095)
     */
    private long sequence = 0L;

    /**
     * Time cut of last ID generation
     */
    private long lastTimestamp = -1L;

    //==============================Constructors=====================================

    /**
     * Constructor
     *
     * @param workerId     Work ID (0-31)
     * @param datacenterId Data Center ID (0-31)
     */
    public ShortDomainNameGenerator(long workerId, long datacenterId) {
        if (workerId > maxWorkerId || workerId < 0) {
            throw new IllegalArgumentException(String.format("worker Id can't be greater than %d or less than 0", maxWorkerId));
        }
        if (datacenterId > maxDatacenterId || datacenterId < 0) {
            throw new IllegalArgumentException(String.format("datacenter Id can't be greater than %d or less than 0", maxDatacenterId));
        }
        this.workerId = workerId;
        this.datacenterId = datacenterId;
    }

    // ==============================Methods==========================================

    /**
     * Get the next ID (this method is thread-safe)
     *
     * @return SnowflakeId
     */
    public synchronized long nextShortDomainName() {
        long timestamp = timeGen();

        //If the current time is less than the time stamp generated by the last ID, the system clock should throw an exception when it falls back.
        if (timestamp < lastTimestamp) {
            throw new RuntimeException(
                    String.format("Clock moved backwards.  Refusing to generate id for %d milliseconds", lastTimestamp - timestamp));
        }

        //If it is generated at the same time, the sequence in milliseconds is performed.
        if (lastTimestamp == timestamp) {
            sequence = (sequence + 1) & sequenceMask;
            //Sequence overflow in milliseconds
            if (sequence == 0) {
                //Blocking to the next millisecond to get a new timestamp
                timestamp = tilNextMillis(lastTimestamp);
            }
        }
        //Time stamp change, sequence reset in milliseconds
        else {
            sequence = 0L;
        }

        //Time cut of last ID generation
        lastTimestamp = timestamp;

        //Shift and assemble 64-bit ID s together by operation or operation
        return ((timestamp - shortDomainNameServiceEpoch) << timestampLeftShift) //
                | (datacenterId << datacenterIdShift) //
                | (workerId << workerIdShift) //
                | sequence;
    }

    /**
     * Block to the next millisecond until a new timestamp is obtained
     *
     * @param lastTimestamp Time cut of last ID generation
     * @return Current timestamp
     */
    protected long tilNextMillis(long lastTimestamp) {
        long timestamp = timeGen();
        while (timestamp <= lastTimestamp) {
            timestamp = timeGen();
        }
        return timestamp;
    }

    /**
     * Returns the current time in milliseconds
     *
     * @return Current time (milliseconds)
     */
    protected long timeGen() {
        return System.currentTimeMillis();
    }
}
