1、需求分析
    首先题目需要我们采用springboot搭建一个微服务，集成Swagger，在其中实现两个接口的功能模块并完成单元测试。
    要实现的功能为实现长短域名互转。为每个长域名匹配一个随机编码并控制在8位以内，并实现映射关系存取功能。
2、框架搭建
    使用idea创建springboot项目。
    引入swagger依赖。
    引入接口参数及返回值使用的json的相关依赖。
    引入junit测试单元依赖。
    创建系统自定义异常SystemExcetion。
    创建接口通用返回工具ResultUtils及相关枚举类ResultCodeEnum。
    创建swagger启动类。
    在.gitignore文件中加入.class等提交时需要忽略的文件。
3、功能分析
    长短域名转换的实现方式是给每个长域名指定一个编码代替长域名并存储对应关系实现长短域名互相转换(百度的)。
    首先要去掉域名头部，将后面的内容做转换。
    在不使用符号的情况下，可使用的编码字符为0-9、a-z、A-Z共62个字符，即使用62进制编码。
    由于需求规定编码要控制在8位，所以可使用的编码个数位62的8次方即218 340 105 584 896个。
    由于要保证生成的编码不重复，则使用雪花id的生成思路，由时间戳和序列号共同组成序号。
    由于8位62进制的编码最长为15位，则应限制生成序号的长度在15位内。
    时间戳1年为31624400000共11位，保证10年内可用则需要12位则可以大概使用3位长度。
    在考虑到每秒并发量尽可能大的情况下尽量使序列号更长，则按2进制位数计算则为2的10次方1024，则序列号长度取10位。
    在生成完序列号后需转为62进制编码即短域名，将长短域名对应关系存入缓存。
    最后需要实现从缓存中存取对应域名。
4、功能实现
    按照上述思路创建序列生成工具。
    创建controller和service。
    创建长短域名存储Vo。
    创建去掉url头及转62位编码的工具类。
    创建对应关系存储工具类，使用简单的String放入Cache中，防止复杂对象不及时归还内存造成内存溢出、工具类加锁，防止并发造成数据冲突。
    实现域名转换方法，缓存中查找对应关系，并返回相应结果。取短域名时如没有对应关系则生成新的短域名。
5、功能测试
    测试在输入不同情况的内容下输出结果是否为预期结果。
    查看junit代码覆盖率图标。
6、后期扩展
    工具类区分了模块工具类和项目工具类，如果后期有更多模块时可区分使用。
    后期可将缓存放入数据库或redis中存储。