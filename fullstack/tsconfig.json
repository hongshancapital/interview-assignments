{
  "compilerOptions": {
    /* 访问 https://aka.ms/tsconfig.json 以阅读有关此文件的更多信息 */

    /* 基本选项 */
    // "incremental": true,                   /* 启用增量编译 */
    "target": "ES2017" /* 指定 ECMAScript 目标版本：'ES3'、'ES5'（默认）、'ES2015'、'ES2016'、'ES2017'、'ES2018'、'ES2019'、'ES2020' 或 'ESNEXT'。 */,
    "module": "commonjs" /* 指定模块代码生成：“none”、“commonjs”、“amd”、“system”、“umd”、“es2015”、“es2020”或“ESNext”。 */,
    "lib": ["ES2018", "DOM"] /* 指定要包含在编译中的库文件。 */,
    // "allowJs": true /* 允许编译 javascript 文件。 */,
    // "checkJs": true /* 报告 .js 文件中的错误。 */,
    // "jsx": "preserve" /* 指定 JSX 代码生成：'preserve'、'react-native' 或 'react'。 */,
    // "declaration": true /* 生成相应的“.d.ts”文件。 */,
    // "declarationMap": true /* 为每个对应的“.d.ts”文件生成一个源映射。 */,
    "sourceMap": true /* 生成相应的“.map”文件。 */,
    // "outFile": "./" /* 连接输出到单个文件。 */,
    "outDir": "./dist" /* 将输出结构重定向到目录。 */,
    // "rootDir": "./" /* 指定输入文件的根目录。用于通过 --outDir 控制输出目录结构。 */,
    // "composite": true /* 启用项目编译 */,
    // "tsBuildInfoFile": "./" /* 指定文件存放增量编译信息 */,
    // "removeComments": true /* 不要向输出发出注释。 */,
    // "noEmit": true /* 不发出输出。 */,
    // "importHelpers": true /* 从 'tslib' 导入发射助手。 */,
    // "downlevelIteration": true /* 以“ES5”或“ES3”为目标时，为“for-of”、展开和解构中的迭代提供全面支持。 */,
    // "isolatedModules": true /* 将每个文件转换为一个单独的模块（类似于 'ts.transpileModule'）。 */,

    /* 严格的类型检查选项 */
    "strict": true /* 启用所有严格的类型检查选项。 */,
    "noImplicitAny": true /* 使用隐含的“任何”类型在表达式和声明上引发错误。 */,
    // "strictNullChecks": true /* 启用严格的空检查。 */,
    // "strictFunctionTypes": true /* 启用函数类型的严格检查。 */,
    // "strictBindCallApply": true /* 在函数上启用严格的“绑定”、“调用”和“应用”方法。 */,
    // "strictPropertyInitialization": true /* 启用对类中属性初始化的严格检查。 */,
    // "noImplicitThis": true /* 使用隐含的“any”类型在“this”表达式上引发错误。 */,
    // "alwaysStrict": true /* 以严格模式解析并为每个源文件发出“使用严格”。 */,

    /* 额外检查 */
    // "noUnusedLocals": true /* 报告未使用的本地人的错误。 */,
    // "noUnusedParameters": true /* 报告未使用参数的错误。 */,
    // "noImplicitReturns": true /* 不是函数中的所有代码路径都返回值时报告错误。 */,
    // "noFallthroughCasesInSwitch": true /* 在 switch 语句中报告失败情况的错误。 */,

    /* 模块分辨率选项 */
    // "moduleResolution": "node" /* 指定模块解析策略：'node' (Node.js) 或 'classic' (TypeScript pre-1.6)。 */,
    // "baseUrl": "./" /* 解析非绝对模块名称的基目录。 */,
    // "paths": {} /* 一系列将导入重新映射到相对于“baseUrl”的查找位置的条目。 */,
    // "rootDirs": [] /* 根文件夹列表，其组合内容代表运行时项目的结构。 */,
    "typeRoots": ["node_modules/@types"] /* 包含类型定义的文件夹列表。 */,
    // "types": [] /* 类型声明文件要包含在编译中。 */,
    // "allowSyntheticDefaultImports": true /* 允许从没有默认导出的模块中默认导入。 这不会影响代码发出，只是类型检查。 */,
    "esModuleInterop": true /* 通过为所有导入创建命名空间对象，在 CommonJS 和 ES 模块之间启用发射互操作性。 暗示“allowSyntheticDefaultImports”。 */,
    // "preserveSymlinks": true /* 不解析符号链接的真实路径。 */,
    // "allowUmdGlobalAccess": true /* 允许从模块访问 UMD 全局变量。 */,

    /* 源映射选项 */
    // "sourceRoot": "" /* 指定调试器应该定位 TypeScript 文件而不是源位置的位置。 */,
    // "mapRoot": "" /* 指定调试器应该定位映射文件而不是生成位置的位置。 */,
    // "inlineSourceMap": true /* 发出带有源映射的单个文件而不是单独的文件。 */,
    // "inlineSources": true /* 在单个文件中与源映射一起发出源； 需要设置“--inlineSourceMap”或“--sourceMap”。 */,

    /* 实验选项 */
    "experimentalDecorators": true /* 启用对 ES7 装饰器的实验性支持。 */,
    "emitDecoratorMetadata": true /* 为装饰器的发射类型元数据启用实验性支持。 */,

    /* 高级选项 */
    "skipLibCheck": true /* 跳过声明文件的类型检查。 */,
    "forceConsistentCasingInFileNames": true /* 禁止对同一文件的大小写不一致的引用。 */
  }
}
